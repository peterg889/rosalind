"""
    A colletion of utility methods useful for testing driver.py
"""

import random
import textwrap

def generate_random_fragment(n):
    """
        Generates a random string of length n consisting of G, A, T, and C
    """
    ret = ''.join(random.choice("GATC") for _ in range(n))
    return ret

def generate_test_subfragments(test_fragment, chop_length,
                               step_size, rand=False):
    """
        Given a test_fragment, generates a set of subfragments, each of length
        chop_length. Subsequent fragments are offset by step_size.

        Note that if the step_size is more than double the chop_length, we'll
        skip some nucleotides when reconstructing

        Names fragments based on their start_index for easy debugging, with the
        exception of the last fragment, which is named TEST_last

        If random is set to true, the step size is randomly selected from the
        range [1, step_size)

        Args:
            test_fragment (str) : the fragment to generate subfragments based on
            chop_length (int)   : the size of the subfragments to generate
            step_size (int)     : the amount of overlap between subsequent frags
            rand (bool)         : if true, step size is randomly selected
                                  from the range [1, step_size) on each
                                  iteration

        Returns:
            fragment_dict : a dictionary mapping generated subfragment names to
                            their contents

    """

    if step_size > chop_length / 2:
        print "ERROR: Step size is greater than 2x chop length, \
               will skip some portions of chromosome"
        return None

    test_prefix = "TEST_"

    max_step_size = step_size

    fragment_dict = {}

    start_index = 0
    end_index = chop_length

    while end_index < len(test_fragment):
        sample_fragment = test_fragment[start_index:end_index]
        sample_name = test_prefix + str(start_index)

        fragment_dict[sample_name] = sample_fragment

        if rand:
            step_size = random.choice(range(1, max_step_size))

        start_index = start_index + step_size
        end_index = end_index + step_size

    last_fragment = test_fragment[-chop_length:]
    last_fragment_name = test_prefix + "last"

    fragment_dict[last_fragment_name] = last_fragment

    return fragment_dict

def write_fragments_to_disk(fragment_dict, filename):
    """ Given a fragment_dict, like the one generated by
        generate_test_subfragments, write it to disk in a file named
        filename according to FASTA format. Uses 70 character wide columns

        Args:
            fragment_dict (dict) : a dictionary mapping  subfragment
                                   names to their contents
            filename (str)       : the name of the file to write to

        Returns:
            Nothing

    """
    f = open(filename, 'w')

    for fragment_name in fragment_dict:
        name_line = ">" + fragment_name + '\n'
        fragment = fragment_dict[fragment_name]
        f.write(name_line)

        lines = textwrap.wrap(fragment, width=70)
        for line in lines:
            f.write(line + "\n")

        f.write("\n")
    f.close()


